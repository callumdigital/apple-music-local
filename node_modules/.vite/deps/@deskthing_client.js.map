{
  "version": 3,
  "sources": ["../../@deskthing/types/dist/clients/clientData.js", "../../@deskthing/types/dist/clients/clientTransit.js", "../../@deskthing/types/dist/apps/appData.js", "../../@deskthing/types/dist/apps/appSettings.js", "../../@deskthing/types/dist/apps/appTasks.js", "../../@deskthing/types/dist/apps/appTransit.js", "../../@deskthing/types/dist/meta/logging.js", "../../@deskthing/types/dist/meta/music.js", "../../@deskthing/types/dist/meta/transit.js", "../../@deskthing/types/dist/deskthing/deskthingTransit.js", "../../@deskthing/types/dist/deskthing/mappings.js", "../../@deskthing/client/dist/deskthing.js"],
  "sourcesContent": ["export var ClientConnectionMethod;\n(function (ClientConnectionMethod) {\n    ClientConnectionMethod[ClientConnectionMethod[\"Unknown\"] = 0] = \"Unknown\";\n    ClientConnectionMethod[ClientConnectionMethod[\"LAN\"] = 1] = \"LAN\";\n    ClientConnectionMethod[ClientConnectionMethod[\"Localhost\"] = 2] = \"Localhost\";\n    ClientConnectionMethod[ClientConnectionMethod[\"ADB\"] = 3] = \"ADB\";\n    ClientConnectionMethod[ClientConnectionMethod[\"NDIS\"] = 4] = \"NDIS\";\n    ClientConnectionMethod[ClientConnectionMethod[\"Bluetooth\"] = 5] = \"Bluetooth\";\n    ClientConnectionMethod[ClientConnectionMethod[\"Internet\"] = 6] = \"Internet\";\n})(ClientConnectionMethod || (ClientConnectionMethod = {}));\nexport var PlatformIDs;\n(function (PlatformIDs) {\n    PlatformIDs[\"ADB\"] = \"adb\";\n    PlatformIDs[\"WEBSOCKET\"] = \"websocket\";\n    PlatformIDs[\"BLUETOOTH\"] = \"bluetooth\";\n    PlatformIDs[\"MAIN\"] = \"main\";\n})(PlatformIDs || (PlatformIDs = {}));\nexport var ClientPlatformIDs;\n(function (ClientPlatformIDs) {\n    ClientPlatformIDs[ClientPlatformIDs[\"Unknown\"] = 0] = \"Unknown\";\n    ClientPlatformIDs[ClientPlatformIDs[\"Desktop\"] = 1] = \"Desktop\";\n    ClientPlatformIDs[ClientPlatformIDs[\"Tablet\"] = 2] = \"Tablet\";\n    ClientPlatformIDs[ClientPlatformIDs[\"Iphone\"] = 3] = \"Iphone\";\n    ClientPlatformIDs[ClientPlatformIDs[\"CarThing\"] = 4] = \"CarThing\";\n})(ClientPlatformIDs || (ClientPlatformIDs = {}));\nexport var ConnectionState;\n(function (ConnectionState) {\n    ConnectionState[ConnectionState[\"Connected\"] = 0] = \"Connected\";\n    ConnectionState[ConnectionState[\"Established\"] = 1] = \"Established\";\n    ConnectionState[ConnectionState[\"Connecting\"] = 2] = \"Connecting\";\n    ConnectionState[ConnectionState[\"Disconnecting\"] = 3] = \"Disconnecting\";\n    ConnectionState[ConnectionState[\"Disconnected\"] = 4] = \"Disconnected\";\n    ConnectionState[ConnectionState[\"Failed\"] = 5] = \"Failed\";\n})(ConnectionState || (ConnectionState = {}));\nexport var ProviderCapabilities;\n(function (ProviderCapabilities) {\n    ProviderCapabilities[ProviderCapabilities[\"CONFIGURE\"] = 0] = \"CONFIGURE\";\n    ProviderCapabilities[ProviderCapabilities[\"PING\"] = 1] = \"PING\";\n    ProviderCapabilities[ProviderCapabilities[\"COMMUNICATE\"] = 2] = \"COMMUNICATE\";\n})(ProviderCapabilities || (ProviderCapabilities = {}));\n/**\n * @module deskthing/client\n * @description\n * View mode enum used for configuring display states\n * @see {@link ClientPreferences.appTrayState}\n * @see {@link MiniplayerSettings.state}\n */\nexport var ViewMode;\n(function (ViewMode) {\n    ViewMode[\"HIDDEN\"] = \"hidden\";\n    ViewMode[\"PEEK\"] = \"peek\";\n    ViewMode[\"FULL\"] = \"full\";\n})(ViewMode || (ViewMode = {}));\n/**\n * @module deskthing/client\n * @description\n * Volume mode enum used for configuring volume control behavior\n * @see {@link ClientPreferences.volume}\n */\nexport var VolMode;\n(function (VolMode) {\n    VolMode[\"WHEEL\"] = \"wheel\";\n    VolMode[\"SLIDER\"] = \"slider\";\n    VolMode[\"BAR\"] = \"bar\";\n})(VolMode || (VolMode = {}));\n", "/**\n * You generally do not have to worry about this\n */\nexport var CLIENT_REQUESTS;\n(function (CLIENT_REQUESTS) {\n    CLIENT_REQUESTS[\"GET\"] = \"get\";\n    CLIENT_REQUESTS[\"ACTION\"] = \"action\";\n    CLIENT_REQUESTS[\"BUTTON\"] = \"button\";\n    CLIENT_REQUESTS[\"KEY\"] = \"key\";\n    CLIENT_REQUESTS[\"LOG\"] = \"log\";\n})(CLIENT_REQUESTS || (CLIENT_REQUESTS = {}));\n/**\n * You generally do not have to worry about this\n *\n */\nexport var DEVICE_CLIENT;\n(function (DEVICE_CLIENT) {\n    DEVICE_CLIENT[\"MANIFEST\"] = \"manifest\";\n    DEVICE_CLIENT[\"MUSIC\"] = \"music\";\n    DEVICE_CLIENT[\"SETTINGS\"] = \"settings\";\n    DEVICE_CLIENT[\"APPS\"] = \"apps\";\n    DEVICE_CLIENT[\"ACTION\"] = \"action\";\n    DEVICE_CLIENT[\"TIME\"] = \"time\";\n    DEVICE_CLIENT[\"ICON\"] = \"icon\";\n})(DEVICE_CLIENT || (DEVICE_CLIENT = {}));\nexport var DEVICE_DESKTHING;\n(function (DEVICE_DESKTHING) {\n    /** Triggering an action */\n    DEVICE_DESKTHING[\"ACTION\"] = \"action\";\n    /** General set payload */\n    DEVICE_DESKTHING[\"SET\"] = \"set\";\n    /** General get payload */\n    DEVICE_DESKTHING[\"GET\"] = \"get\";\n    /** Request to ping the server */\n    DEVICE_DESKTHING[\"PING\"] = \"ping\";\n    /** Response from a ping */\n    DEVICE_DESKTHING[\"PONG\"] = \"pong\";\n    /** Logging from the client */\n    DEVICE_DESKTHING[\"LOG\"] = \"log\";\n    /** Updates regarding the current view */\n    DEVICE_DESKTHING[\"VIEW\"] = \"view\";\n    /** Payloads intended for apps */\n    DEVICE_DESKTHING[\"APP_PAYLOAD\"] = \"app_payload\";\n    /** Getters / setters for the current manifest */\n    DEVICE_DESKTHING[\"MANIFEST\"] = \"manifest\";\n    /** Getters / setters for the current settings */\n    DEVICE_DESKTHING[\"SETTINGS\"] = \"settings\";\n    /** Getters / setters for the current configuration */\n    DEVICE_DESKTHING[\"CONFIG\"] = \"config\";\n})(DEVICE_DESKTHING || (DEVICE_DESKTHING = {}));\n", "/**\n * Different supported platforms for the app\n */\nexport var PlatformTypes;\n(function (PlatformTypes) {\n    PlatformTypes[\"WINDOWS\"] = \"windows\";\n    PlatformTypes[\"LINUX\"] = \"linux\";\n    PlatformTypes[\"MAC\"] = \"mac\";\n    PlatformTypes[\"MAC64\"] = \"mac64\";\n    PlatformTypes[\"MACARM\"] = \"macarm\";\n    PlatformTypes[\"ANDROID\"] = \"android\";\n    PlatformTypes[\"IOS\"] = \"ios\";\n    PlatformTypes[\"ARM64\"] = \"arm64\";\n    PlatformTypes[\"X64\"] = \"x64\";\n})(PlatformTypes || (PlatformTypes = {}));\n/**\n * For the manifest. Different types of tags that can be used to categorize apps\n */\nexport var TagTypes;\n(function (TagTypes) {\n    TagTypes[\"AUDIO_SOURCE\"] = \"audiosource\";\n    TagTypes[\"SCREEN_SAVER\"] = \"screensaver\";\n    TagTypes[\"UTILITY_ONLY\"] = \"utilityOnly\";\n    TagTypes[\"WEB_APP_ONLY\"] = \"webappOnly\";\n})(TagTypes || (TagTypes = {}));\n", "/**\n * The different types of available settings\n * @since 0.11.0\n */\nexport var SETTING_TYPES;\n(function (SETTING_TYPES) {\n    SETTING_TYPES[\"BOOLEAN\"] = \"boolean\";\n    SETTING_TYPES[\"NUMBER\"] = \"number\";\n    SETTING_TYPES[\"STRING\"] = \"string\";\n    SETTING_TYPES[\"RANGE\"] = \"range\";\n    SETTING_TYPES[\"SELECT\"] = \"select\";\n    SETTING_TYPES[\"MULTISELECT\"] = \"multiselect\";\n    SETTING_TYPES[\"LIST\"] = \"list\";\n    SETTING_TYPES[\"RANKED\"] = \"ranked\";\n    SETTING_TYPES[\"COLOR\"] = \"color\";\n    SETTING_TYPES[\"FILE\"] = \"file\";\n})(SETTING_TYPES || (SETTING_TYPES = {}));\n", "export var STEP_TYPES;\n(function (STEP_TYPES) {\n    STEP_TYPES[\"ACTION\"] = \"action\";\n    STEP_TYPES[\"SHORTCUT\"] = \"shortcut\";\n    STEP_TYPES[\"SETTING\"] = \"setting\";\n    STEP_TYPES[\"TASK\"] = \"task\";\n    STEP_TYPES[\"EXTERNAL\"] = \"external\";\n    STEP_TYPES[\"STEP\"] = \"step\";\n})(STEP_TYPES || (STEP_TYPES = {}));\n", "/**\n * Events sent from the App Server to the DeskThing Server\n */\nexport var APP_REQUESTS;\n(function (APP_REQUESTS) {\n    /**\n     * Default handler for unknown or unspecified data types.\n     * Will log a warning message about the unknown data type.\n     */\n    APP_REQUESTS[\"DEFAULT\"] = \"default\";\n    /**\n     * Retrieves data from the server. Supports multiple request types:\n     * - 'data': Gets app-specific stored data\n     * - 'config': Gets configuration (deprecated)\n     * - 'settings': Gets application settings\n     * - 'input': Requests user input via a form\n     *\n     * @remarks Use {@link DeskThing.getData}, {@link DeskThing.getConfig}, {@link DeskThing.getSettings}, or {@link DeskThing.getUserInput} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.GET, { request: 'settings' })\n     */\n    APP_REQUESTS[\"GET\"] = \"get\";\n    /**\n     * Sets data inside the server for your app that can be retrieved with DeskThing.getData()\n     * Data is stored persistently and can be retrieved later.\n     *\n     * @remarks Use {@link DeskThing.saveData} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.SET, { payload: { key: 'value' }})\n     */\n    APP_REQUESTS[\"SET\"] = \"set\";\n    /**\n     * Deletes data inside the server for your app that can be retrieved with DeskThing.getData()\n     *\n     * @remarks Use {@link DeskThing.deleteSettings} or {@link DeskThing.deleteData} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.DELETE, { payload: ['key1', 'key2'] }, \"settings\")\n     * DeskThing.sendData(APP_REQUESTS.DELETE, { payload: ['key1', 'key2'] }, \"data\")\n     */\n    APP_REQUESTS[\"DELETE\"] = \"delete\";\n    /**\n     * Opens a URL to a specific address on the server.\n     * This gets around any CORS issues that may occur by opening in a new window.\n     * Typically used for authentication flows.\n     *\n     * @remarks Use {@link DeskThing.openUrl} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.OPEN, { payload: 'https://someurl.com' })\n     */\n    APP_REQUESTS[\"OPEN\"] = \"open\";\n    /**\n     * Sends data to the front end client.\n     * Can target specific client components or send general messages.\n     * Supports sending to both the main client and specific app clients.\n     *\n     * @remarks Use {@link DeskThing.send} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.SEND, { type: 'someData', payload: 'value' })\n     *\n     * @example\n     * DeskThing.send({ type: 'someData', payload: 'value', clientId: '18274923402' })\n     */\n    APP_REQUESTS[\"SEND\"] = \"send\";\n    /**\n     * Sends data to another app in the system.\n     * Allows inter-app communication by specifying target app and payload.\n     * Messages are logged for debugging purposes.\n     *\n     * @remarks Use {@link DeskThing.sendDataToOtherApp} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.TOAPP, { request: 'spotify', payload: { type: 'get', data: 'music' }})\n     */\n    APP_REQUESTS[\"TOAPP\"] = \"toApp\";\n    /**\n     * Logs messages to the system logger.\n     * Supports multiple log levels: DEBUG, ERROR, FATAL, LOGGING, MESSAGE, WARNING\n     * Messages are tagged with the source app name.\n     *\n     * @remarks Use {@link DeskThing.log} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.LOG, { request: 'ERROR', payload: 'Something went wrong' })\n     */\n    APP_REQUESTS[\"LOG\"] = \"log\";\n    /**\n     * Manages key mappings in the system.\n     * Supports operations: add, remove, trigger\n     * Keys can have multiple modes and are associated with specific apps.\n     *\n     * @remarks Use {@link DeskThing.registerKeyObject} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.KEY, { request: 'add', payload: { id: 'myKey', modes: ['default'] }})\n     */\n    APP_REQUESTS[\"KEY\"] = \"key\";\n    /**\n     * Manages actions in the system.\n     * Supports operations: add, remove, update, run\n     * Actions can have values, icons, and version information.\n     *\n     * @remarks\n     * It is recommended to use {@link DeskThing.registerAction} instead of sending data directly.\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.ACTION, { request: 'add', payload: { id: 'myAction', name: 'My Action' }})\n     */\n    APP_REQUESTS[\"ACTION\"] = \"action\";\n    /**\n     * Manages tasks in the system.\n     * Supports operations: get, update, delete, add, complete, restart, start, and end\n     *\n     * @remarks\n     * It is recommended to use {@link DeskThing.tasks.addTask} instead of sending data directly.\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.TASK, { request: 'add', payload: { id: 'myAction', name: 'My Action' }})\n     */\n    APP_REQUESTS[\"TASK\"] = \"task\";\n    /**\n     * Manages actions in the system.\n     * Supports operations: get, update, delete, add, complete, restart, start, and end\n     *\n     * @remarks\n     * It is recommended to use {@link DeskThing.tasks.addStep} instead of sending data directly.\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.ACTION, { request: 'add', payload: { id: 'myAction', name: 'My Action' }})\n     */\n    APP_REQUESTS[\"STEP\"] = \"step\";\n    /**\n     * Sends song data to the server\n     * Payload should be type {@link SongData}\n     *\n     * @example\n     * DeskThing.send({ type: APP_REQUESTS.SONG, request: 'add', payload: { id: 'mySong', title: 'My Song', artist: 'Artist Name' }})\n     */\n    APP_REQUESTS[\"SONG\"] = \"song\";\n    /**\n     * Sends a notification to the server\n     * Payload should be type {@link NotificationMessage}\n     *\n     * @example\n     * const result = await DeskThing.once({\n     *        type: APP_REQUESTS.MESSAGE,\n     *        request: 'send',\n     *        payload: {\n     *            id: 'myMessage',\n     *            type: \"text\",\n     *            title: 'My Message',\n     *            description: 'This is a message',\n     *            link: 'https://example.com'\n     *        }\n     *    }, { type: APP_REQUESTS.MESSAGE, request: 'myMessage' }\n     * )\n     *\n     * console.log(result.payload.response) // will log the response from the user\n     */\n    APP_REQUESTS[\"MESSAGE\"] = \"message\";\n})(APP_REQUESTS || (APP_REQUESTS = {}));\n", "export var LOGGING_LEVELS;\n(function (LOGGING_LEVELS) {\n    LOGGING_LEVELS[\"MESSAGE\"] = \"message\";\n    LOGGING_LEVELS[\"LOG\"] = \"log\";\n    LOGGING_LEVELS[\"WARN\"] = \"warning\";\n    LOGGING_LEVELS[\"ERROR\"] = \"error\";\n    LOGGING_LEVELS[\"DEBUG\"] = \"debugging\";\n    LOGGING_LEVELS[\"FATAL\"] = \"fatal\";\n})(LOGGING_LEVELS || (LOGGING_LEVELS = {}));\n", "export var SongAbilities;\n(function (SongAbilities) {\n    SongAbilities[\"LIKE\"] = \"like\";\n    SongAbilities[\"SHUFFLE\"] = \"shuffle\";\n    SongAbilities[\"REPEAT\"] = \"repeat\";\n    SongAbilities[\"PLAY\"] = \"play\";\n    SongAbilities[\"PAUSE\"] = \"pause\";\n    SongAbilities[\"STOP\"] = \"stop\";\n    SongAbilities[\"NEXT\"] = \"next\";\n    SongAbilities[\"PREVIOUS\"] = \"previous\";\n    SongAbilities[\"REWIND\"] = \"rewind\";\n    SongAbilities[\"FAST_FORWARD\"] = \"fast_forward\";\n    SongAbilities[\"CHANGE_VOLUME\"] = \"change_volume\";\n    SongAbilities[\"SET_OUTPUT\"] = \"set_output\";\n})(SongAbilities || (SongAbilities = {}));\nconst abc = {};\n/**\n * Various audio requests that will be sent to an audio source\n */\nexport var AUDIO_REQUESTS;\n(function (AUDIO_REQUESTS) {\n    AUDIO_REQUESTS[\"NEXT\"] = \"next\";\n    AUDIO_REQUESTS[\"PREVIOUS\"] = \"previous\";\n    AUDIO_REQUESTS[\"REWIND\"] = \"rewind\";\n    AUDIO_REQUESTS[\"FAST_FORWARD\"] = \"fast_forward\";\n    AUDIO_REQUESTS[\"PLAY\"] = \"play\";\n    AUDIO_REQUESTS[\"PAUSE\"] = \"pause\";\n    /** @deprecated */\n    AUDIO_REQUESTS[\"STOP\"] = \"stop\";\n    AUDIO_REQUESTS[\"SEEK\"] = \"seek\";\n    AUDIO_REQUESTS[\"LIKE\"] = \"like\";\n    AUDIO_REQUESTS[\"SONG\"] = \"song\";\n    AUDIO_REQUESTS[\"VOLUME\"] = \"volume\";\n    AUDIO_REQUESTS[\"REPEAT\"] = \"repeat\";\n    AUDIO_REQUESTS[\"SHUFFLE\"] = \"shuffle\";\n    /** Only used by the server */\n    AUDIO_REQUESTS[\"REFRESH\"] = \"refresh\";\n})(AUDIO_REQUESTS || (AUDIO_REQUESTS = {}));\n/**\n * A specific SongEvent enum for filtering only song-related events\n */\nexport var SongEvent;\n(function (SongEvent) {\n    /**\n     * request: 'song' | 'refresh'\n     */\n    SongEvent[\"GET\"] = \"get\";\n    /**\n     * request: \"next\" | \"previous\" | \"fast_forward\" | \"rewind\" | \"play\" | \"pause\" | \"stop\" | \"seek\" | \"like\" | \"volume\" | \"repeat\"\n     */\n    SongEvent[\"SET\"] = \"set\";\n})(SongEvent || (SongEvent = {}));\n", "export var TransitSources;\n(function (TransitSources) {\n    /** App Client */\n    TransitSources[\"CLIENT\"] = \"client\";\n    /** App server */\n    TransitSources[\"APP\"] = \"app\";\n    /** DeskThing Device */\n    TransitSources[\"DEVICE\"] = \"device\";\n    /** DeskThing Server */\n    TransitSources[\"DESKTHING\"] = \"deskthing\";\n    /** App Client Connector */\n    TransitSources[\"CONCLIENT\"] = \"conclient\";\n    /** App Server Connector */\n    TransitSources[\"CONSERVER\"] = \"conserver\";\n})(TransitSources || (TransitSources = {}));\n/**\n * Naming conventions should go\n *\n * Source2SourcePayload\n * Source2SourceType\n */\n", "/**\n * All data that is sent from the DeskThing Server to the Client\n * @package DeskThingServer + DeskThingClient\n */\nexport var DESKTHING_DEVICE;\n(function (DESKTHING_DEVICE) {\n    /** Will never be emitted to your client. Only exists on device */\n    DESKTHING_DEVICE[\"GLOBAL_SETTINGS\"] = \"global_settings\";\n    /** Will never be emitted to your client. Only exists on device */\n    DESKTHING_DEVICE[\"MAPPINGS\"] = \"button_mappings\";\n    /** Will never be emitted to your client. Only exists on device */\n    DESKTHING_DEVICE[\"CONFIG\"] = \"configuration\";\n    /** Will never be emitted to your client. Only exists on device */\n    DESKTHING_DEVICE[\"GET\"] = \"get\";\n    /** Will never be emitted to your client. Only exists on device */\n    DESKTHING_DEVICE[\"ERROR\"] = \"error\";\n    DESKTHING_DEVICE[\"PONG\"] = \"pong\";\n    DESKTHING_DEVICE[\"PING\"] = \"ping\";\n    DESKTHING_DEVICE[\"SETTINGS\"] = \"settings\";\n    DESKTHING_DEVICE[\"APPS\"] = \"apps\";\n    DESKTHING_DEVICE[\"TIME\"] = \"time\";\n    DESKTHING_DEVICE[\"HEARTBEAT\"] = \"heartbeat\";\n    DESKTHING_DEVICE[\"META_DATA\"] = \"meta_data\";\n    DESKTHING_DEVICE[\"MUSIC\"] = \"music\";\n    DESKTHING_DEVICE[\"ICON\"] = \"icon\";\n})(DESKTHING_DEVICE || (DESKTHING_DEVICE = {}));\n/**\n * Enum representing the different types of events that can be emitted by the DeskThing class.\n * @readonly\n * @since 0.10.4\n * @enum {string}\n */\nexport var DESKTHING_EVENTS;\n(function (DESKTHING_EVENTS) {\n    /**\n     * Sends a notification to the server\n     * Payload should be type {@link NotificationMessage}\n     *\n     * @example\n     * const result = await DeskThing.once({\n     *        type: APP_REQUESTS.MESSAGE,\n     *        request: 'send',\n     *        payload: {\n     *            id: 'myMessage',\n     *            type: \"text\",\n     *            title: 'My Message',\n     *            description: 'This is a message',\n     *            link: 'https://example.com'\n     *        }\n     *    }, { type: APP_REQUESTS.MESSAGE, request: 'myMessage' }\n     * )\n     *\n     * console.log(result.payload.response) // will log the response from the user\n     */\n    DESKTHING_EVENTS[\"MESSAGE\"] = \"message\";\n    /**\n     * Data response from getData()\n     * Triggered whenever data is updated on the server\n     * @remark Does not trigger when settings update. Use {@link DESKTHING_EVENTS.SETTINGS} instead\n     * */\n    DESKTHING_EVENTS[\"DATA\"] = \"data\";\n    /**\n     * The full appDataInterface object\n     * Triggered whenever data is updated on the server\n     * */\n    DESKTHING_EVENTS[\"APPDATA\"] = \"appdata\";\n    /**\n     * Response data from callback functions\n     * Usually from oAuth flows\n     */\n    DESKTHING_EVENTS[\"CALLBACK_DATA\"] = \"callback-data\";\n    /**\n     * Server signals app to start\n     * Triggered when the server initializes the app\n     */\n    DESKTHING_EVENTS[\"START\"] = \"start\";\n    /**\n     * Server signals app to stop\n     * Triggered when the server needs to shutdown the app\n     */\n    DESKTHING_EVENTS[\"STOP\"] = \"stop\";\n    /**\n     * Server signals to purge app data\n     * Triggered when all app data should be deleted\n     */\n    DESKTHING_EVENTS[\"PURGE\"] = \"purge\";\n    /**\n     * User input form response data\n     * Contains data submitted by users through forms\n     */\n    DESKTHING_EVENTS[\"INPUT\"] = \"input\";\n    /**\n     * Response from user action/interaction\n     * Contains data from user-triggered events or interactions\n     * @param data.payload is the triggering {@link Action}. Use the action.id to determine the action\n     */\n    DESKTHING_EVENTS[\"ACTION\"] = \"action\";\n    /**\n     * App configuration data (deprecated)\n     * Legacy configuration system, use SETTINGS instead\n     * @deprecated - Use {@link DESKTHING_EVENTS.SETTINGS} instead\n     */\n    DESKTHING_EVENTS[\"CONFIG\"] = \"config\";\n    /**\n     * App settings data\n     * Contains current application settings and preferences\n     * Can sometimes be partial. So be warned.\n     */\n    DESKTHING_EVENTS[\"SETTINGS\"] = \"settings\";\n    /**\n     * Updated task data. Will be triggered with the task data\n     * Requests include \"update\", \"task\", and \"step\"\n     */\n    DESKTHING_EVENTS[\"TASKS\"] = \"tasks\";\n    /**\n     * Connection data. Will be triggered when a client connects or disconnects\n     * request includes \"connected\", \"disconnected\", \"opened\", \"closed\"\n     */\n    DESKTHING_EVENTS[\"CLIENT_STATUS\"] = \"client_status\";\n})(DESKTHING_EVENTS || (DESKTHING_EVENTS = {}));\n", "/**\n * @deprecated - use {@link EventMode} instead\n */\nexport var EventFlavor;\n(function (EventFlavor) {\n    EventFlavor[EventFlavor[\"KeyUp\"] = 0] = \"KeyUp\";\n    EventFlavor[EventFlavor[\"KeyDown\"] = 1] = \"KeyDown\";\n    EventFlavor[EventFlavor[\"ScrollUp\"] = 2] = \"ScrollUp\";\n    EventFlavor[EventFlavor[\"ScrollDown\"] = 3] = \"ScrollDown\";\n    EventFlavor[EventFlavor[\"ScrollLeft\"] = 4] = \"ScrollLeft\";\n    EventFlavor[EventFlavor[\"ScrollRight\"] = 5] = \"ScrollRight\";\n    EventFlavor[EventFlavor[\"SwipeUp\"] = 6] = \"SwipeUp\";\n    EventFlavor[EventFlavor[\"SwipeDown\"] = 7] = \"SwipeDown\";\n    EventFlavor[EventFlavor[\"SwipeLeft\"] = 8] = \"SwipeLeft\";\n    EventFlavor[EventFlavor[\"SwipeRight\"] = 9] = \"SwipeRight\";\n    EventFlavor[EventFlavor[\"PressShort\"] = 10] = \"PressShort\";\n    EventFlavor[EventFlavor[\"PressLong\"] = 11] = \"PressLong\";\n})(EventFlavor || (EventFlavor = {}));\nexport var EventMode;\n(function (EventMode) {\n    EventMode[EventMode[\"KeyUp\"] = 0] = \"KeyUp\";\n    EventMode[EventMode[\"KeyDown\"] = 1] = \"KeyDown\";\n    EventMode[EventMode[\"ScrollUp\"] = 2] = \"ScrollUp\";\n    EventMode[EventMode[\"ScrollDown\"] = 3] = \"ScrollDown\";\n    EventMode[EventMode[\"ScrollLeft\"] = 4] = \"ScrollLeft\";\n    EventMode[EventMode[\"ScrollRight\"] = 5] = \"ScrollRight\";\n    EventMode[EventMode[\"SwipeUp\"] = 6] = \"SwipeUp\";\n    EventMode[EventMode[\"SwipeDown\"] = 7] = \"SwipeDown\";\n    EventMode[EventMode[\"SwipeLeft\"] = 8] = \"SwipeLeft\";\n    EventMode[EventMode[\"SwipeRight\"] = 9] = \"SwipeRight\";\n    EventMode[EventMode[\"PressShort\"] = 10] = \"PressShort\";\n    EventMode[EventMode[\"PressLong\"] = 11] = \"PressLong\";\n})(EventMode || (EventMode = {}));\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { EventMode, DEVICE_CLIENT, LOGGING_LEVELS, CLIENT_REQUESTS, ClientPlatformIDs, } from \"@deskthing/types\";\nexport class DeskThingClass {\n    /**\n     * Initializes the DeskThing instance and sets up event listeners.\n     * Sends a message to the parent indicating that the client has started.\n     * Also sets up a click event listener for buttons.\n     * @version 0.10.4\n     */\n    constructor() {\n        this.listeners = {};\n        this.onceListenerKeys = new Set();\n        this.keyOverrides = new Set();\n        /**\n         * Asynchronously waits for a response after sending a request to the client\n         * @param {SocketData} requestData - The data to send to initiate the request\n         * @param {SocketData} listenFor - The response data pattern to listen for\n         * @param {Function?} callback - Optional callback function to handle the response\n         * @returns {Promise<t | undefined>} - The retrieved data still wrapped in its payload, or undefined if the request fails or times out after 5 seconds\n         * @version 0.10.4\n         *\n         * This will automatically return the payload of the response.\n         *\n         * @example\n         * // On the client\n         * const data = await DeskThing.fetch<UserProfile>(\n         *            { type: 'get', request: 'profile', payload: { userId: '123' } },\n         *            { type: 'users', request: 'update' }\n         *         );\n         *\n         * console.log(data.payload); // prints the user profile data\n         *\n         * // On the server\n         * DeskThing.on('get', (data) => {\n         *  if (data.request == 'profile') {\n         *    DeskThing.send({\n         *      type: 'users',\n         *      payload: users.getUserById(data.payload.userId),\n         *      request: 'update'\n         *    })\n         *  }\n         * }\n         *\n         * @example\n         * // On the client\n         * DeskThing.fetch<UserProfile>(\n         *   { type: 'get', request: 'profile', payload: { userId: '123' } },\n         *   { type: 'users', request: 'update' }\n         *   async (userData) => {{\n         *      console.log(userData.payload); // prints the user profile data\n         *   }\n         * );\n         *\n         *\n         * // On the server\n         * DeskThing.on('get', (data) => {\n         *  if (data.request == 'profile') {\n         *    DeskThing.send({\n         *      type: 'users',\n         *      payload: users.getUserById(data.payload.userId),\n         *      request: 'update'\n         *    })\n         *  }\n         * }\n         */\n        this.fetch = (requestData, listenFor, callbackFn) => __awaiter(this, void 0, void 0, function* () {\n            if (!requestData.type) {\n                console.warn(\"Request data must have a type property\");\n                return undefined;\n            }\n            if (!listenFor)\n                return;\n            if (!listenFor.type) {\n                console.warn(\"Listen for data must have a type property\");\n                return undefined;\n            }\n            const listenKey = `${listenFor.type}-${listenFor.request || \"undefined\"}`;\n            const timeout = new Promise((_, reject) => {\n                setTimeout(() => {\n                    return reject(new Error(`Timed out waiting for response: type=${listenFor.type}, request=${listenFor.request || \"undefined\"}`));\n                }, 5000);\n            });\n            let removeListener;\n            const dataPromise = new Promise((resolve) => {\n                // First setup the listener to avoid missing the response\n                removeListener = this.once(listenFor.type, (data) => {\n                    this.onceListenerKeys.delete(listenKey);\n                    resolve(data);\n                }, listenFor.request);\n                // Send the request only if another process isn't already waiting on it\n                // the onceListenerKey is removed upon the data being returned\n                if (!this.onceListenerKeys.has(listenKey)) {\n                    this.send(requestData);\n                    this.onceListenerKeys.add(listenKey);\n                }\n            });\n            const data = Promise.race([dataPromise, timeout]).catch((error) => {\n                this.error(error);\n                removeListener && removeListener();\n                this.onceListenerKeys.delete(listenKey);\n                return undefined;\n            });\n            if (callbackFn) {\n                data.then((data) => callbackFn(data));\n            }\n            return data;\n        });\n        /**\n         * @deprecated Use {@link DeskThing.fetch} instead\n         * Asynchronously waits for a response after sending a request to the client\n         * @param {string} type - The type to listen to\n         * @param {SocketData} requestData - The data to send that will be listened to\n         * @param {string?} request (optional) A specific request to listen for\n         * @returns {Promise<t | undefined>} - The retrieved data, or undefined if the request fails or times out after 5 seconds\n         * @version 0.10.4\n         *\n         * This will automatically return the payload of the response.\n         *\n         * @example\n         * // On the client\n         * const data = await deskThing.fetchData<UserProfile>('users', {\n         *   type: 'get',\n         *   request: 'profile',\n         *   payload: { userId: '123' }\n         * });\n         * console.log(data); // prints the user profile data\n         *\n         * // On the server\n         * DeskThing.on('get', (data) => {\n         *  if (data.request == 'profile') {\n         *    DeskThing.send({\n         *      type: 'users',\n         *      payload: users.getUserById(data.payload.userId)\n         *    })\n         *  }\n         * }\n         */\n        this.fetchData = (type, requestData, request) => __awaiter(this, void 0, void 0, function* () {\n            return this.fetch(requestData, { type, request } // Not good typing - but this is depreciated\n            );\n        });\n        /**\n         * Requests and waits for music data from the server\n         * @returns {Promise<SongData | undefined>} - The retrieved music data, or undefined if the request fails\n         * @version 0.10.4\n         *\n         * @example\n         * const musicData = await deskThing.getMusic();\n         * if (musicData) {\n         *   console.log('Current song:', musicData.song_title);\n         * }\n         */\n        this.getMusic = () => __awaiter(this, void 0, void 0, function* () {\n            const socketResponse = yield this.fetch({\n                app: \"client\",\n                type: CLIENT_REQUESTS.GET,\n                request: \"music\",\n            }, {\n                type: DEVICE_CLIENT.MUSIC\n            });\n            if (!socketResponse)\n                return undefined;\n            const musicData = socketResponse.payload;\n            if (musicData && musicData.thumbnail) {\n                musicData.thumbnail = this.formatImageUrl(musicData.thumbnail);\n            }\n            return musicData;\n        });\n        /**\n         * Requests and waits for application settings from the server\n         * @returns {Promise<AppSettings | undefined>} - The retrieved settings, or undefined if the request fails\n         * @version 0.10.4\n         *\n         * @example\n         * const settings = await deskThing.getSettings();\n         * if (settings) {\n         *   console.log('Theme:', settings.theme.value);\n         *   console.log('Language:', settings.language.value);\n         * }\n         */\n        this.getSettings = () => __awaiter(this, void 0, void 0, function* () {\n            const socketResponse = yield this.fetch({\n                app: \"client\",\n                type: CLIENT_REQUESTS.GET,\n                request: \"settings\",\n            }, {\n                type: DEVICE_CLIENT.SETTINGS,\n            });\n            if (!socketResponse)\n                return undefined;\n            return socketResponse.payload;\n        });\n        /**\n         * Requests and waits for the list of installed apps from the server\n         * @returns {Promise<App[] | undefined>} - The retrieved apps list, or undefined if the request fails\n         * @version 0.10.4\n         *\n         * @example\n         * const installedApps = await deskThing.getApps();\n         * if (installedApps) {\n         *   installedApps.forEach(app => {\n         *     console.log('App name:', app.name);\n         *   });\n         * }\n         */\n        this.getApps = () => __awaiter(this, void 0, void 0, function* () {\n            const socketResponse = yield this.fetch({\n                app: \"client\",\n                type: CLIENT_REQUESTS.GET,\n                request: \"apps\",\n            }, {\n                type: DEVICE_CLIENT.APPS,\n            });\n            if (!socketResponse)\n                return undefined;\n            return socketResponse.payload;\n        });\n        /**\n         * Returns the URL for the action mapped to the key. Usually, the URL points to an SVG icon.\n         * @param KeyReference\n         * @returns {Promise<string | undefined>} - The URL for the action icon, or undefined if the request fails\n         * @version 0.10.4\n         */\n        this.getKeyIcon = (KeyReference) => __awaiter(this, void 0, void 0, function* () {\n            const socketResponse = yield this.fetch({\n                app: \"client\",\n                type: CLIENT_REQUESTS.GET,\n                request: \"key\",\n                payload: KeyReference,\n            }, { type: KeyReference.id });\n            if (!socketResponse)\n                return undefined;\n            return socketResponse.payload;\n        });\n        /**\n         * Returns the URL for the action . Usually, the URL points to an SVG icon.\n         * @param action\n         * @returns {Promise<string | undefined>} - The URL for the action icon, or undefined if the request fails\n         * @version 0.10.4\n         */\n        this.getActionIcon = (action) => __awaiter(this, void 0, void 0, function* () {\n            const socketResponse = yield this.fetch({\n                app: \"client\",\n                type: CLIENT_REQUESTS.GET,\n                request: \"action\",\n                payload: action,\n            }, { type: action.id });\n            if (!socketResponse)\n                return undefined;\n            return socketResponse.payload;\n        });\n        /**\n         * Triggers an action as if it were triggered by a button\n         * @param {ActionReference} action - The action to trigger\n         * @param {string} action.id - The ID of the action\n         * @param {string} [action.value] - Optional value for the action\n         * @param {string} [action.source] - Optional source of the action (defaults to current app)\n         * @version 0.10.4\n         *\n         * @example\n         * // Trigger a simple action\n         * deskThing.triggerAction({ id: 'do-something' });\n         *\n         * // Trigger an action with a value and custom source\n         * deskThing.triggerAction({\n         *   id: 'volup',\n         *   value: '15',\n         *   source: 'server'\n         * });\n         *\n         * @example\n         * // Trigger an action that modifies the client\n         * deskThing.triggerAction({\n         *   id: 'appslist',\n         *   value: 'show',\n         *   source: 'server'\n         * });\n         *\n         * @example\n         * // Trigger an action on your app\n         * deskThing.triggerAction({\n         *   id: 'service',\n         *   value: 'restart'\n         * });\n         *\n         * // Server-side code\n         * DeskThing.on('action', (action) => {\n         *   if (action.id === 'service') {\n         *     console.log(action.value); // prints restart\n         *   }\n         * });\n         */\n        this.triggerAction = (action) => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            this.send({\n                app: \"client\",\n                type: CLIENT_REQUESTS.ACTION,\n                payload: Object.assign(Object.assign({}, action), { enabled: (_a = action.enabled) !== null && _a !== void 0 ? _a : true, source: action.source || ((_b = this.manifest) === null || _b === void 0 ? void 0 : _b.id) || 'server' }),\n            });\n        });\n        /**\n         * Triggers the action tied to a specific key\n         * @param {KeyReference} KeyReference - The key trigger configuration\n         * @param {string} KeyReference.key - The key to trigger\n         * @param {EventMode} KeyReference.mode - The event mode (e.g., 'keydown', 'keyup')\n         * @param {string} [KeyReference.source] - Optional source of the key trigger (defaults to current app)\n         *\n         * @example\n         * // Trigger a keydown event\n         * deskThing.triggerKey({\n         *   key: 'Enter',\n         *   mode: EventMode.KeyDown,\n         *   source: 'server'\n         * });\n         *\n         * // Trigger a keyup event with custom source\n         * deskThing.triggerKey({\n         *   key: 'Escape',\n         *   mode: EventMode.PressLong,\n         *   source: 'server'\n         * });\n         */\n        this.triggerKey = (KeyReference) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (!KeyReference.source) {\n                KeyReference.source = ((_a = this.manifest) === null || _a === void 0 ? void 0 : _a.name) || \"server\";\n            }\n            this.send({\n                app: \"client\",\n                type: CLIENT_REQUESTS.KEY,\n                payload: KeyReference,\n            });\n        });\n        /**\n         * Returns the manifest of the server\n         * @returns {Promise<ClientManifest | undefined>} The manifest of the server, or undefined if the request fails\n         */\n        this.getManifest = () => __awaiter(this, void 0, void 0, function* () {\n            if (this.manifest) {\n                return this.manifest;\n            }\n            const socketResponse = yield this.fetch({\n                app: \"client\",\n                type: CLIENT_REQUESTS.GET,\n                request: \"manifest\",\n            }, {\n                type: DEVICE_CLIENT.MANIFEST,\n            });\n            if (!socketResponse)\n                return undefined;\n            this.manifest = socketResponse.payload;\n            return socketResponse.payload;\n        });\n        /**\n         * Formats an image URL to make the returned string a usable src for an image\n         * @param image - A legacy-acceptable image url that can be either base64 OR a url\n         * @returns - a usable URL\n         * @depreciated - use {@link DeskThing.useProxy} instead\n         * @example\n         * //server\n         * DeskThing.on('getImage', (socketData: SocketData) => {\n         *    const imageUrl = await DeskThing.saveImageReferenceFromURL('https://host.com/some/image/url.png')\n         *    DeskThing.send({ type: 'image', payload: imageUrl || '' })\n         * })\n         *\n         * // client\n         * const imageUrl = await DeskThing.fetchData<string>('image', { type: 'getImage' })\n         * const formattedImage = DeskThing.formatImageUrl(imageUrl)\n         * return <img src={formattedImage} alt=\"Image\" />\n         * @example\n         * //server\n         * const imageUrl = await DeskThing.saveImageReferenceFromURL(settings.image.value)\n         * DeskThing.send({ type: 'image', payload: imageUrl || '' })\n         *\n         * // client\n         * const [image, setImage] = useState<string>('')\n         * const imageUrl = await DeskThing.on('image', (imageUrl) => {\n         *   const formattedImage = DeskThing.formatImageUrl(imageUrl)\n         *   setImage(formattedImage)\n         * })\n         * return <img src={image} alt=\"Image\" />\n         */\n        this.formatImageUrl = (image) => {\n            var _a, _b, _c, _d, _e;\n            if (!((_a = this.manifest) === null || _a === void 0 ? void 0 : _a.context)) {\n                return image;\n            }\n            if (image.startsWith(\"data:image\")) {\n                return image;\n            }\n            if (this.manifest.context.id == ClientPlatformIDs.CarThing || this.manifest.context.ip == 'localhost') {\n                // If and only if it is localhost or in a car thing context\n                return image.replace(\"localhost:8891\", `${((_c = (_b = this.manifest) === null || _b === void 0 ? void 0 : _b.context) === null || _c === void 0 ? void 0 : _c.ip) || 'localhost'}:${((_e = (_d = this.manifest) === null || _d === void 0 ? void 0 : _d.context) === null || _e === void 0 ? void 0 : _e.port) || 8891}`);\n            }\n            return image;\n        };\n        /**\n         * Use the proxy to fetch an image from the server\n         *\n         * version 1\n         *\n         * @param url - The url to fetch\n         * @returns - The proxied url that can be used to fetch the image\n         * @example\n         * const imageUrl = DeskThing.useProxy('https://example.com/image.png')\n         * return <img src={imageUrl} alt=\"Image\" />\n         */\n        this.useProxy = (url) => {\n            var _a, _b, _c, _d;\n            // Handle data urls\n            if (url.startsWith('data:image')) {\n                return url;\n            }\n            return `http://${((_b = (_a = this.manifest) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.ip) || 'localhost'}:${((_d = (_c = this.manifest) === null || _c === void 0 ? void 0 : _c.context) === null || _d === void 0 ? void 0 : _d.port) || 8891}/proxy/v1?url=${encodeURIComponent(url)}`;\n        };\n        this.initialize();\n        this.initializeListeners();\n    }\n    /**\n     * Initializes the message event listener.\n     * @private\n     * @version 0.10.4\n     */\n    initialize() {\n        window.addEventListener(\"message\", this.handleMessage.bind(this));\n    }\n    /**\n     * Sets up the listeners and bubbles them to the server\n     * @private\n     * @version 0.10.4\n     */\n    initializeListeners() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const eventsToForward = [\"wheel\", \"keydown\", \"keyup\"];\n            const forwardEvent = (event) => {\n                // Check if event was prevented elsewhere\n                if (event.defaultPrevented) {\n                    return;\n                }\n                // Check if it is a keyboard event and handle those differently\n                if (event instanceof KeyboardEvent) {\n                    // Get the code for the key that was pressed\n                    const key = event.code;\n                    if (this.keyOverrides.has(key.toLowerCase())) {\n                        return; // Skip default DeskThing handling\n                    }\n                    const mode = event.type === \"keydown\" ? EventMode.KeyDown : EventMode.KeyUp;\n                    this.triggerKey({ id: key, mode });\n                }\n                else if (event instanceof WheelEvent) {\n                    // Initialize the mode of the button press\n                    if (this.keyOverrides.has('wheel')) {\n                        return; // Skip default DeskThing handling\n                    }\n                    let mode = EventMode.ScrollUp;\n                    if (event.deltaY > 0)\n                        mode = EventMode.ScrollDown;\n                    else if (event.deltaY < 0)\n                        mode = EventMode.ScrollUp;\n                    else if (event.deltaX > 0)\n                        mode = EventMode.ScrollRight;\n                    else if (event.deltaX < 0)\n                        mode = EventMode.ScrollLeft;\n                    this.triggerKey({ id: \"Scroll\", mode });\n                }\n            };\n            const options = {\n                capture: true,\n                passive: false,\n            };\n            eventsToForward.forEach((eventType) => {\n                document.addEventListener(eventType, forwardEvent, options);\n            });\n            const fetchManifest = () => __awaiter(this, void 0, void 0, function* () {\n                this.manifest = yield this.fetchData(\"manifest\", {\n                    type: CLIENT_REQUESTS.GET,\n                    request: \"manifest\",\n                    app: \"client\",\n                });\n            });\n            const handleManifest = (socketData) => __awaiter(this, void 0, void 0, function* () {\n                if (socketData.type == DEVICE_CLIENT.MANIFEST && socketData.payload) {\n                    this.info('Received the manifest from the server');\n                    this.manifest = socketData.payload;\n                }\n            });\n            fetchManifest();\n            this.on(DEVICE_CLIENT.MANIFEST, handleManifest);\n        });\n    }\n    /**\n   * Prevents default DeskThing handling for specific keys\n   * @param keys - Array of key codes to override (e.g., ['KeyA', 'Enter', 'Space'])\n   * @example\n   * deskThing.overrideKeys(['KeyA', 'Enter', 'Scroll']);\n   */\n    overrideKeys(keys) {\n        keys.forEach(key => this.keyOverrides.add(key.toLowerCase()));\n    }\n    /**\n     * Removes key overrides\n     * @param keys - Array of key codes to restore default\n     * @example\n     * deskThing.restoreKeys(['KeyA', 'Enter', 'Scroll']);\n     */\n    restoreKeys(keys) {\n        keys.forEach(key => this.keyOverrides.delete(key.toLowerCase()));\n    }\n    /**\n     * Singleton pattern: Ensures only one instance of DeskThing exists.\n     * @returns {DeskThingClass} The single instance of DeskThing\n     * @version 0.10.4\n     *\n     * @example\n     * const deskThing = DeskThing.getInstance();\n     */\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new DeskThingClass();\n        }\n        return this.instance;\n    }\n    /**\n     * Registers an event listener for a specific event type.\n     * @param {string} type - The type of event to listen for\n     * @param {EventCallback} callback - The function to call when the event occurs\n     * @returns {Function} A function to remove the event listener\n     * @version 0.10.4\n     *\n     * @example\n     * const removeListener = deskThing.on('music', (data: SocketData) => {\n     *   console.log('Received music data:', data.payload);\n     * });\n     *\n     * @example\n     * // Client-side code (here)\n     * const removeListener = deskThing.on('customdata', (data: SocketData) => {\n     *   console.log('Received custom data:', data.payload);\n     * });\n     *\n     * // Server-side code\n     * DeskThing.send({ type: 'customdata', payload: 'Hello from the server!' });\n     */\n    on(type, callback) {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n        return () => this.off(type, callback);\n    }\n    /**\n     * Removes an event listener for a specific event type.\n     * @param {string} type - The type of event to remove the listener from\n     * @param {EventCallback} callback - The function to remove from the listeners\n     * @version 0.10.4\n     *\n     * @example\n     * deskThing.off('message', messageCallback);\n     */\n    off(type, callback) {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter((listener) => listener !== callback);\n        }\n    }\n    /**\n     * Handles incoming messages from the parent window.\n     * @param {MessageEvent} event - The message event received\n     * @private\n     * @version 0.10.4\n     */\n    handleMessage(event) {\n        // Return if the message is not from the deskthing\n        if (event.data.source !== \"deskthing\")\n            return;\n        const socketData = event.data;\n        this.emit(socketData.type, socketData);\n    }\n    /**\n     * Emits an event to all registered listeners for that event type.\n     * @param {string} type - The type of event to emit\n     * @param {SocketData} data - The data to pass to the event listeners\n     * @returns {Promise<void>}\n     * @private\n     * @version 0.10.4\n     */\n    emit(type, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const callbacks = this.listeners[type];\n            if (callbacks) {\n                const promises = callbacks.map((callback) => __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        yield callback(data);\n                    }\n                    catch (error) {\n                        console.error(\"Error in event callback:\", error);\n                    }\n                }));\n                // Doesn't await for all of the callbacks to finish being run\n                Promise.all(promises);\n            }\n            // Cleanup any listener keys if there are any\n            const listenKey = `${type}-${data.request || \"undefined\"}`;\n            const res = this.onceListenerKeys.delete(listenKey);\n            if (res) {\n                this.debug(`Removed callback key ${listenKey} because the callback was resolved`);\n            }\n        });\n    }\n    /**\n     * Listens for a single occurrence of an event, then removes the listener\n     * @param {string} type - The event type to listen for\n     * @param {EventCallback} callback - The function to call when the event occurs\n     * @returns {Function} - Function to manually remove the listener\n     * @version 0.10.4\n     *\n     * @example\n     * deskThing.once('music', (data) => {\n     *   console.log('Received music data:', data.payload);\n     * });\n     *\n     * @example\n     * // Client-side code (here)\n     * deskThing.once('data', (data) => {\n     *   console.log('Received specific request:', data.payload); // prints Payload 3 once\n     * }, 'specificRequest');\n     *\n     *  // Server-side code\n     * DeskThing.send({ type: 'data', payload: 'Payload 1', request: 'someRequest' }); // Wont send\n     * DeskThing.send({ type: 'data', payload: 'Payload 2', request: 'randomRequest' }); // Wont send\n     * DeskThing.send({ type: 'data', payload: 'Payload 3', request: 'specificRequest' }); // Will send\n     * DeskThing.send({ type: 'data', payload: 'Payload 4', request: 'faultyRequest' }); // Wont send\n     * DeskThing.send({ type: 'data', payload: 'Payload 5', request: 'specificRequest' }); // Wont send\n     */\n    once(type, callback, request) {\n        const removeListener = this.on(type, (data) => {\n            if (request && data.request !== request)\n                return;\n            // Typescript cant correctly infer that request is R and not string because string is anything\n            callback(data);\n            removeListener();\n        });\n        return removeListener;\n    }\n    /**\n     * Sends a message to the parent window.\n     * @param {SocketData} data - The data to send to the parent. \"app\" defaults to the current app\n     * @deprecated Use send() instead\n     * @example\n     * deskThing.sendMessageToParent({\n     *   app: 'client',\n     *   type: 'action',\n     *   payload: { buttonClicked: 'submit' }\n     * });\n     */\n    sendMessageToParent(data) {\n        this.send(data);\n    }\n    /**\n     * Sends a message to the parent window.\n     * @param {SocketData} data - The data to send to the parent. \"app\" defaults to the current app\n     *\n     * @example\n     * deskThing.send({\n     *   app: 'client',\n     *   type: 'action',\n     *   payload: { buttonClicked: 'submit' }\n     * });\n     */\n    send(data) {\n        var _a;\n        const payload = {\n            app: data.app || undefined,\n            type: data.type || undefined,\n            request: data.request || null,\n            payload: (_a = data.payload) !== null && _a !== void 0 ? _a : null,\n        };\n        window.parent.postMessage({ type: \"IFRAME_ACTION\", payload: payload }, \"*\");\n    }\n    /**\n     * Logs the message in the console, the client, and the server\n     * The extra data logged will not be bubbled anywhere but the console\n     *\n     * @example\n     * DeskThing.log(LOGGING_LEVELS.INFO, 'This is an info message', 'this is extra data');\n     * // logs \"[CLIENT]: This is an info message this is extra data\" to the console\n     * // logs \"[YourApp] This is an info message\" to the client\n     * // logs \"[CLIENT.YourApp] This is an info message\" to the server\n     */\n    log(level, message, ...extraData) {\n        this.send({\n            app: \"client\",\n            type: CLIENT_REQUESTS.LOG,\n            request: level,\n            payload: { message, data: [...extraData] },\n        });\n    }\n    /**\n     * Logs the message in the console, the client, and the server\n     * The extra data logged will not be bubbled anywhere but the console\n     *\n     * @example\n     * DeskThing.error('This is an error message', 'this is extra data');\n     * // logs \"[CLIENT]: This is an error message this is extra data\" to the console\n     * // logs \"[YourApp] This is an error message\" to the client\n     * // logs \"[CLIENT.YourApp] This is an error message\" to the server\n     */\n    error(message, ...extraData) {\n        this.log(LOGGING_LEVELS.ERROR, message, ...extraData);\n    }\n    /**\n     * Logs the message in the console, the client, and the server\n     * The extra data logged will not be bubbled anywhere but the console\n     *\n     * @example\n     * DeskThing.warn('This is a warning message', 'this is extra data');\n     * // logs \"[CLIENT]: This is a warning message this is extra data\" to the console\n     * // logs \"[YourApp] This is a warning message\" to the client\n     * // logs \"[CLIENT.YourApp] This is a warning message\" to the server\n     */\n    warn(message, ...extraData) {\n        this.log(LOGGING_LEVELS.WARN, message, ...extraData);\n    }\n    /**\n     * Logs the message in the console, the client, and the server\n     * The extra data logged will not be bubbled anywhere but the console\n     *\n     * @example\n     * DeskThing.debug('This is a debug message', 'this is extra data');\n     * // logs \"[CLIENT]: This is a debug message this is extra data\" to the console\n     * // logs \"[YourApp] This is a debug message\" to the client\n     * // logs \"[CLIENT.YourApp] This is a debug message\" to the server\n     */\n    debug(message, ...extraData) {\n        this.log(LOGGING_LEVELS.DEBUG, message, ...extraData);\n    }\n    /**\n     * Logs the message in the console, the client, and the server\n     * The extra data logged will not be bubbled anywhere but the console\n     *\n     * @example\n     * DeskThing.fatal('This is a fatal message', 'this is extra data');\n     * // logs \"[CLIENT]: This is a fatal message this is extra data\" to the console\n     * // logs \"[YourApp] This is a fatal message\" to the client\n     * // logs \"[CLIENT.YourApp] This is a fatal message\" to the server\n     */\n    fatal(message, ...extraData) {\n        this.log(LOGGING_LEVELS.FATAL, message, ...extraData);\n    }\n    /**\n     * Logs the message in the console, the client, and the server\n     * The extra data logged will not be bubbled anywhere but the console\n     *\n     * @example\n     * DeskThing.info('This is an info message', 'this is extra data');\n     * // logs \"[CLIENT]: This is an info message this is extra data\" to the console\n     * // logs \"[YourApp] This is an info message\" to the client\n     * // logs \"[CLIENT.YourApp] This is a fatal message\" to the server\n     */\n    info(message, ...extraData) {\n        this.log(LOGGING_LEVELS.LOG, message, ...extraData);\n    }\n}\n/**\n/**\n  * Creates a new instance of the DeskThing class\n  * @template CustomIncomingData Type for data that can be received from the socket, defaults to SocketData\n  * @template CustomOutgoingData Type for data that can be sent through the socket, defaults to SocketData\n  * @returns A new instance of the DeskThing class with specified generic types\n  * @example\n  * // Basic usage with default types\n  * const deskThing = createDeskThing();\n  *\n  * // Usage with custom types\n  * interface MyListenData { message: string }\n  * interface MySendData { status: boolean }\n  * const customDeskThing = createDeskThing<MyListenData, MySendData>();\n  *\n  * @example\n  * // Very complex usage with strong typing\n  *\n  * // Define types\n  * type CustomIncomingData = {\n  *   type: 'someData';\n  *   request?: 'opt1' | 'opt2';\n  *   payload: 'someWantedReturnedData'\n  * }\n  *\n  * type CustomOutgoingData = {\n  *   type: 'getSomeData';\n  *   request?: 'opt1' | 'opt2';\n  *   payload: 'someOtherData'\n  * }\n  *\n  * // Create the deskthing object\n  * const dk = createDeskThing<CustomIncomingData, CustomOutgoingData>();\n  *\n  * // ex async function for awaiting\n  * const d = async () => {\n  *\n  *   // using the fetch() method - everything is strongly typed\n  *   const data = await dk.fetch({\n  *     type: 'getSomeData',\n  *     request: 'opt1',\n  *     payload: 'someOtherData'\n  *   }, {\n  *     type: 'someData',\n  *     request: 'opt1',\n  *   }, (data) => {\n  *     // optional callback hook. data will be 'someWantedReturnedData'\n  *     return data\n  *   })\n  *\n  *   // data will be 'someWantedReturnedData'\n  *   console.log(data)\n  *\n  *   const settings = await dk.fetch({\n  *     type: CLIENT_REQUESTS.GET,\n  *     request: 'settings',\n  *     app: 'client'\n  *   }, {\n  *     type: DEVICE_CLIENT.SETTINGS,\n  *   }, (data) => {\n  *\n  *     console.log('From the callback function', data)\n  *   })\n  *\n  *   data\n  *\n  * }\n  */\nexport function createDeskThing() {\n    return DeskThingClass.getInstance();\n}\n/**\n * The DeskThing instance.\n * Only use for utility-functions like encoding images or sending logs\n *\n * Do not use for any data fetching/listening, instead use {@link createDeskThing}\n *\n * @example\n * import { DeskThing } from \"@deskthing/client\";\n *\n * DeskThing.sendInfo('This is an info message', 'this is extra data');\n */\nexport const DeskThing = createDeskThing();\n"],
  "mappings": "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",
  "names": ["ClientConnectionMethod", "PlatformIDs", "ClientPlatformIDs", "ConnectionState", "ProviderCapabilities", "ViewMode", "VolMode", "CLIENT_REQUESTS", "DEVICE_CLIENT", "DEVICE_DESKTHING", "PlatformTypes", "TagTypes", "SETTING_TYPES", "STEP_TYPES", "APP_REQUESTS", "LOGGING_LEVELS", "SongAbilities", "AUDIO_REQUESTS", "SongEvent", "TransitSources", "DESKTHING_DEVICE", "DESKTHING_EVENTS", "EventFlavor", "EventMode", "data"]
}
