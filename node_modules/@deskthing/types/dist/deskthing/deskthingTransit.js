/**
 * All data that is sent from the DeskThing Server to the Client
 * @package DeskThingServer + DeskThingClient
 */
export var DESKTHING_DEVICE;
(function (DESKTHING_DEVICE) {
    /** Will never be emitted to your client. Only exists on device */
    DESKTHING_DEVICE["GLOBAL_SETTINGS"] = "global_settings";
    /** Will never be emitted to your client. Only exists on device */
    DESKTHING_DEVICE["MAPPINGS"] = "button_mappings";
    /** Will never be emitted to your client. Only exists on device */
    DESKTHING_DEVICE["CONFIG"] = "configuration";
    /** Will never be emitted to your client. Only exists on device */
    DESKTHING_DEVICE["GET"] = "get";
    /** Will never be emitted to your client. Only exists on device */
    DESKTHING_DEVICE["ERROR"] = "error";
    DESKTHING_DEVICE["PONG"] = "pong";
    DESKTHING_DEVICE["PING"] = "ping";
    DESKTHING_DEVICE["SETTINGS"] = "settings";
    DESKTHING_DEVICE["APPS"] = "apps";
    DESKTHING_DEVICE["TIME"] = "time";
    DESKTHING_DEVICE["HEARTBEAT"] = "heartbeat";
    DESKTHING_DEVICE["META_DATA"] = "meta_data";
    DESKTHING_DEVICE["MUSIC"] = "music";
    DESKTHING_DEVICE["ICON"] = "icon";
})(DESKTHING_DEVICE || (DESKTHING_DEVICE = {}));
/**
 * Enum representing the different types of events that can be emitted by the DeskThing class.
 * @readonly
 * @since 0.10.4
 * @enum {string}
 */
export var DESKTHING_EVENTS;
(function (DESKTHING_EVENTS) {
    /**
     * Sends a notification to the server
     * Payload should be type {@link NotificationMessage}
     *
     * @example
     * const result = await DeskThing.once({
     *        type: APP_REQUESTS.MESSAGE,
     *        request: 'send',
     *        payload: {
     *            id: 'myMessage',
     *            type: "text",
     *            title: 'My Message',
     *            description: 'This is a message',
     *            link: 'https://example.com'
     *        }
     *    }, { type: APP_REQUESTS.MESSAGE, request: 'myMessage' }
     * )
     *
     * console.log(result.payload.response) // will log the response from the user
     */
    DESKTHING_EVENTS["MESSAGE"] = "message";
    /**
     * Data response from getData()
     * Triggered whenever data is updated on the server
     * @remark Does not trigger when settings update. Use {@link DESKTHING_EVENTS.SETTINGS} instead
     * */
    DESKTHING_EVENTS["DATA"] = "data";
    /**
     * The full appDataInterface object
     * Triggered whenever data is updated on the server
     * */
    DESKTHING_EVENTS["APPDATA"] = "appdata";
    /**
     * Response data from callback functions
     * Usually from oAuth flows
     */
    DESKTHING_EVENTS["CALLBACK_DATA"] = "callback-data";
    /**
     * Server signals app to start
     * Triggered when the server initializes the app
     */
    DESKTHING_EVENTS["START"] = "start";
    /**
     * Server signals app to stop
     * Triggered when the server needs to shutdown the app
     */
    DESKTHING_EVENTS["STOP"] = "stop";
    /**
     * Server signals to purge app data
     * Triggered when all app data should be deleted
     */
    DESKTHING_EVENTS["PURGE"] = "purge";
    /**
     * User input form response data
     * Contains data submitted by users through forms
     */
    DESKTHING_EVENTS["INPUT"] = "input";
    /**
     * Response from user action/interaction
     * Contains data from user-triggered events or interactions
     * @param data.payload is the triggering {@link Action}. Use the action.id to determine the action
     */
    DESKTHING_EVENTS["ACTION"] = "action";
    /**
     * App configuration data (deprecated)
     * Legacy configuration system, use SETTINGS instead
     * @deprecated - Use {@link DESKTHING_EVENTS.SETTINGS} instead
     */
    DESKTHING_EVENTS["CONFIG"] = "config";
    /**
     * App settings data
     * Contains current application settings and preferences
     * Can sometimes be partial. So be warned.
     */
    DESKTHING_EVENTS["SETTINGS"] = "settings";
    /**
     * Updated task data. Will be triggered with the task data
     * Requests include "update", "task", and "step"
     */
    DESKTHING_EVENTS["TASKS"] = "tasks";
    /**
     * Connection data. Will be triggered when a client connects or disconnects
     * request includes "connected", "disconnected", "opened", "closed"
     */
    DESKTHING_EVENTS["CLIENT_STATUS"] = "client_status";
})(DESKTHING_EVENTS || (DESKTHING_EVENTS = {}));
