/**
 * Events sent from the App Server to the DeskThing Server
 */
export var APP_REQUESTS;
(function (APP_REQUESTS) {
    /**
     * Default handler for unknown or unspecified data types.
     * Will log a warning message about the unknown data type.
     */
    APP_REQUESTS["DEFAULT"] = "default";
    /**
     * Retrieves data from the server. Supports multiple request types:
     * - 'data': Gets app-specific stored data
     * - 'config': Gets configuration (deprecated)
     * - 'settings': Gets application settings
     * - 'input': Requests user input via a form
     *
     * @remarks Use {@link DeskThing.getData}, {@link DeskThing.getConfig}, {@link DeskThing.getSettings}, or {@link DeskThing.getUserInput} instead
     *
     * @example
     * DeskThing.sendData(APP_REQUESTS.GET, { request: 'settings' })
     */
    APP_REQUESTS["GET"] = "get";
    /**
     * Sets data inside the server for your app that can be retrieved with DeskThing.getData()
     * Data is stored persistently and can be retrieved later.
     *
     * @remarks Use {@link DeskThing.saveData} instead
     *
     * @example
     * DeskThing.sendData(APP_REQUESTS.SET, { payload: { key: 'value' }})
     */
    APP_REQUESTS["SET"] = "set";
    /**
     * Deletes data inside the server for your app that can be retrieved with DeskThing.getData()
     *
     * @remarks Use {@link DeskThing.deleteSettings} or {@link DeskThing.deleteData} instead
     *
     * @example
     * DeskThing.sendData(APP_REQUESTS.DELETE, { payload: ['key1', 'key2'] }, "settings")
     * DeskThing.sendData(APP_REQUESTS.DELETE, { payload: ['key1', 'key2'] }, "data")
     */
    APP_REQUESTS["DELETE"] = "delete";
    /**
     * Opens a URL to a specific address on the server.
     * This gets around any CORS issues that may occur by opening in a new window.
     * Typically used for authentication flows.
     *
     * @remarks Use {@link DeskThing.openUrl} instead
     *
     * @example
     * DeskThing.sendData(APP_REQUESTS.OPEN, { payload: 'https://someurl.com' })
     */
    APP_REQUESTS["OPEN"] = "open";
    /**
     * Sends data to the front end client.
     * Can target specific client components or send general messages.
     * Supports sending to both the main client and specific app clients.
     *
     * @remarks Use {@link DeskThing.send} instead
     *
     * @example
     * DeskThing.sendData(APP_REQUESTS.SEND, { type: 'someData', payload: 'value' })
     *
     * @example
     * DeskThing.send({ type: 'someData', payload: 'value', clientId: '18274923402' })
     */
    APP_REQUESTS["SEND"] = "send";
    /**
     * Sends data to another app in the system.
     * Allows inter-app communication by specifying target app and payload.
     * Messages are logged for debugging purposes.
     *
     * @remarks Use {@link DeskThing.sendDataToOtherApp} instead
     *
     * @example
     * DeskThing.sendData(APP_REQUESTS.TOAPP, { request: 'spotify', payload: { type: 'get', data: 'music' }})
     */
    APP_REQUESTS["TOAPP"] = "toApp";
    /**
     * Logs messages to the system logger.
     * Supports multiple log levels: DEBUG, ERROR, FATAL, LOGGING, MESSAGE, WARNING
     * Messages are tagged with the source app name.
     *
     * @remarks Use {@link DeskThing.log} instead
     *
     * @example
     * DeskThing.sendData(APP_REQUESTS.LOG, { request: 'ERROR', payload: 'Something went wrong' })
     */
    APP_REQUESTS["LOG"] = "log";
    /**
     * Manages key mappings in the system.
     * Supports operations: add, remove, trigger
     * Keys can have multiple modes and are associated with specific apps.
     *
     * @remarks Use {@link DeskThing.registerKeyObject} instead
     *
     * @example
     * DeskThing.sendData(APP_REQUESTS.KEY, { request: 'add', payload: { id: 'myKey', modes: ['default'] }})
     */
    APP_REQUESTS["KEY"] = "key";
    /**
     * Manages actions in the system.
     * Supports operations: add, remove, update, run
     * Actions can have values, icons, and version information.
     *
     * @remarks
     * It is recommended to use {@link DeskThing.registerAction} instead of sending data directly.
     *
     * @example
     * DeskThing.sendData(APP_REQUESTS.ACTION, { request: 'add', payload: { id: 'myAction', name: 'My Action' }})
     */
    APP_REQUESTS["ACTION"] = "action";
    /**
     * Manages tasks in the system.
     * Supports operations: get, update, delete, add, complete, restart, start, and end
     *
     * @remarks
     * It is recommended to use {@link DeskThing.tasks.addTask} instead of sending data directly.
     *
     * @example
     * DeskThing.sendData(APP_REQUESTS.TASK, { request: 'add', payload: { id: 'myAction', name: 'My Action' }})
     */
    APP_REQUESTS["TASK"] = "task";
    /**
     * Manages actions in the system.
     * Supports operations: get, update, delete, add, complete, restart, start, and end
     *
     * @remarks
     * It is recommended to use {@link DeskThing.tasks.addStep} instead of sending data directly.
     *
     * @example
     * DeskThing.sendData(APP_REQUESTS.ACTION, { request: 'add', payload: { id: 'myAction', name: 'My Action' }})
     */
    APP_REQUESTS["STEP"] = "step";
    /**
     * Sends song data to the server
     * Payload should be type {@link SongData}
     *
     * @example
     * DeskThing.send({ type: APP_REQUESTS.SONG, request: 'add', payload: { id: 'mySong', title: 'My Song', artist: 'Artist Name' }})
     */
    APP_REQUESTS["SONG"] = "song";
    /**
     * Sends a notification to the server
     * Payload should be type {@link NotificationMessage}
     *
     * @example
     * const result = await DeskThing.once({
     *        type: APP_REQUESTS.MESSAGE,
     *        request: 'send',
     *        payload: {
     *            id: 'myMessage',
     *            type: "text",
     *            title: 'My Message',
     *            description: 'This is a message',
     *            link: 'https://example.com'
     *        }
     *    }, { type: APP_REQUESTS.MESSAGE, request: 'myMessage' }
     * )
     *
     * console.log(result.payload.response) // will log the response from the user
     */
    APP_REQUESTS["MESSAGE"] = "message";
})(APP_REQUESTS || (APP_REQUESTS = {}));
